#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: dea06d81-33d4-4e95-a834-a1fca7ee7b10
# Source File: C:\Users\Lenovo\Documents\SAPIEN\PowerShell Studio\Projects\Scryptero\Scryptero.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
CwMAAB+LCAAAAAAABACdUtFOwjAUfSfhH5Y+mowxQcE4+qBkhgeVMOKrKd3FTbt2aTtgfr3duiEG
iMaX257e03Pu7W2wACo2IMsp0QR3O44TzKV4B6qdqOQ0kYKnnxBPUEiYAlQfhinTICfoopcr/7aK
mV1iu/i7jNWbdR2VifYkAZb39E6j2shYvYBUqeD4stcPvBY0OeMCsymOgfSv47HvDgbx0B3CzZVL
xoOhS/w1JSOA0co3dxtyc7XpYFnmgE3yELbigsXGzvEO3VQDGujcFSkznfcRjjSRusirZqzXOaaz
gDVI4BTCglNt2pmgKBFb95GkPBQyezWvgnCLqjf6RTBKiKzefykLOCk/4xvxAe4DEyvCjLyPsN2r
ahT/LPc+MYzvevfwDwWfk4yAZkSZjzMnSm2FPJA/mTqyssAOaT9Ui55l+pZywirCE8kAR1SWuREU
RiU3zMA7onQ7gffj838B0z4M5wsDAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       10.05.2018 17:26
     Generated by:       Lenovo
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
UwUAACODCAAAAAAABABllFmrq1gQhd8D+Q+H+ypc56hw+oDT1mgcYhyib04xDlujxvHXd/r2S0PX
U1GLKlis4vt28rSb82GT4nf89WnGsmv/+kX+xn/9HA9fX9/WUBZlGzegbHIzhvmPEZct6Ab4+zU+
vtH/yX+W/tF/ZF1Xcb9ow3XhedGSRP7fEnipgQo+ExV/XTnOJtp8YZ89fjUurqCBLtbffRKmygmn
AxfqvqQY1Yo3z5akreOBh3h3hWdVCIK4FkRl4vaIQ2ykWTaUSJDrQpI7u6X8c5ZF1sLiKnEjfMq6
7KG6543muBs36WAGzEJcjwfONyRbVGFO34zq/IaI0vE6y7Oh8pQ9g49WHlukYB8tH3Wy+nQvz/t4
LziilU+kmfEmbi22KUuF3u3j8TBaRHzGQpwSF5aRtI8n6KVyvA5Y8Crhra10yqG4KcP2qsisiK/E
JBdf8iIHapyEYmAPewrXmLYb/n48xHlslsDtQkK2ZZfZ0aJQrwRLFrpMijSWr8kbzpCYMZVRzrnp
ntp3msjpfnFkx8gVSxZbrI0Nc6dw/HhA/Y8KM9Y9KYmhUhbO2pdN0eb7uCuX2BaQ7jXp06PSrmuN
YdhQUShWZqsrsKFKZJp06XYPOttAgDd/PIghm8kjkYum2t/2yujuuHq/uM5+iVMu3N13zHvhE9Us
a6FZM3r1bxva5Ody5seqdjO9vGLUsK2hnOXHg6naVjFu5zV4pkK0ul5Vh9nTgc/X4gNVDYH9QuxS
p2vhyXmpJqxdbIfR2bmPHeP0YdspWwtxDzGaRj4eVPh5urU4G+TU7Jq/XWog03WQ2xLC50ZMKgAX
IqJxXNDmILpwt7uTRHRDLwbquFTO3arnY633oGnAcDwU0d5wYTKELO3LDuZGq5yTN6NJuwe6t7cZ
mKoWCQEPngQhmOAFXNzKtGsoay0oCq5mT2OGjbXblJfT8UAxunJqt0t/JVdB1ShYL0OPOkwIApop
K+2dLpgH9InaMN4nKBsPKsJOrs7wWgJVjujCoENKVyb8rdYfp41/RSDHYPzKpHMXsWQQ9l2/ZYuT
2qmH6Er9oG76jX+LJlZoj37q+ch18YrfNDVRmC2pBWPQYqekP5mmEaVzQinJs4OBvNCMRSNrFAla
lWcKp2i7Tc+ggzTxbfOHqwYKPNTKyS3IES8nZisvyAywpm4RUuOOh5OA6XNcD++XX98Fr0TKALKn
tdXGx2xuYAezl23GVAArIqpSicv9WTZnAla+7nqBridPqBcY1U/Gyzwe7nhqWASpQaYgB0lXUbu/
v0i89CMXoecpbJy0YndQo+HkACNUT5q87OcW9/xL20rX/oK3cAiqrHno3vEw5ZN0hyESixzVA3+r
yr6C5WC/bWrF3TXUnglTMQwNdqk0u2elfqj1jf6B2h+88eOYw6Qp8/EL/Uy+0f9C9Odv4A44rlMF
AAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Scryptero = New-Object 'System.Windows.Forms.Form'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonSecmasterPass = New-Object 'System.Windows.Forms.Button'
	$buttonCheckExt3Att = New-Object 'System.Windows.Forms.Button'
	$groupboxGlobalData = New-Object 'System.Windows.Forms.GroupBox'
	$labelMacAdress = New-Object 'System.Windows.Forms.Label'
	$labelUserID = New-Object 'System.Windows.Forms.Label'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$buttonUserID = New-Object 'System.Windows.Forms.Button'
	$textboxMacAddress = New-Object 'System.Windows.Forms.TextBox'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$textboxComputerNameMainForm = New-Object 'System.Windows.Forms.TextBox'
	$buttonComputerName = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$Scryptero_Load={
	#TODO: Initialize Form Controls here
	
	}
	
	$buttonCheckExt3Att_Click={
		#TODO: Place custom script here
		
		if ((Show-ChildForm_psf) -eq 'OK')
		{
			Out-Default $textboxMacAddress
		}
		
	}
	
	$buttonSecmasterPass_Click={
		#TODO: Place custom script here
		if ((Show-SecmasterPasswordForm_psf) -eq 'OK')
		{
			Out-Default $textboxComputerNameMainForm
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Scryptero.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxMacAddress = $textboxMacAddress.Text
		$script:MainForm_textbox2 = $textbox2.Text
		$script:MainForm_textboxComputerNameMainForm = $textboxComputerNameMainForm.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSecmasterPass.remove_Click($buttonSecmasterPass_Click)
			$buttonCheckExt3Att.remove_Click($buttonCheckExt3Att_Click)
			$Scryptero.remove_Load($Scryptero_Load)
			$Scryptero.remove_Load($Form_StateCorrection_Load)
			$Scryptero.remove_Closing($Form_StoreValues_Closing)
			$Scryptero.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$Scryptero.SuspendLayout()
	$groupbox1.SuspendLayout()
	$groupboxGlobalData.SuspendLayout()
	#
	# Scryptero
	#
	$Scryptero.Controls.Add($groupbox1)
	$Scryptero.Controls.Add($groupboxGlobalData)
	$Scryptero.AutoScaleDimensions = '6, 13'
	$Scryptero.AutoScaleMode = 'Font'
	$Scryptero.ClientSize = '432, 430'
	$Scryptero.Name = 'Scryptero'
	$Scryptero.StartPosition = 'CenterScreen'
	$Scryptero.Text = 'Scryptero'
	$Scryptero.add_Load($Scryptero_Load)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonSecmasterPass)
	$groupbox1.Controls.Add($buttonCheckExt3Att)
	$groupbox1.Location = '13, 134'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '407, 118'
	$groupbox1.TabIndex = 2
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Script'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# buttonSecmasterPass
	#
	$buttonSecmasterPass.Location = '148, 19'
	$buttonSecmasterPass.Name = 'buttonSecmasterPass'
	$buttonSecmasterPass.Size = '73, 23'
	$buttonSecmasterPass.TabIndex = 1
	$buttonSecmasterPass.Text = 'Secmaster Password'
	$buttonSecmasterPass.UseCompatibleTextRendering = $True
	$buttonSecmasterPass.UseVisualStyleBackColor = $True
	$buttonSecmasterPass.add_Click($buttonSecmasterPass_Click)
	#
	# buttonCheckExt3Att
	#
	$buttonCheckExt3Att.Anchor = 'None'
	$buttonCheckExt3Att.Location = '7, 19'
	$buttonCheckExt3Att.Name = 'buttonCheckExt3Att'
	$buttonCheckExt3Att.Size = '134, 23'
	$buttonCheckExt3Att.TabIndex = 0
	$buttonCheckExt3Att.Text = 'Check Extension Att'
	$buttonCheckExt3Att.UseCompatibleTextRendering = $True
	$buttonCheckExt3Att.UseVisualStyleBackColor = $True
	$buttonCheckExt3Att.add_Click($buttonCheckExt3Att_Click)
	#
	# groupboxGlobalData
	#
	$groupboxGlobalData.Controls.Add($labelMacAdress)
	$groupboxGlobalData.Controls.Add($labelUserID)
	$groupboxGlobalData.Controls.Add($labelComputerName)
	$groupboxGlobalData.Controls.Add($buttonUserID)
	$groupboxGlobalData.Controls.Add($textboxMacAddress)
	$groupboxGlobalData.Controls.Add($textbox2)
	$groupboxGlobalData.Controls.Add($textboxComputerNameMainForm)
	$groupboxGlobalData.Controls.Add($buttonComputerName)
	$groupboxGlobalData.Location = '13, 13'
	$groupboxGlobalData.Name = 'groupboxGlobalData'
	$groupboxGlobalData.Size = '407, 115'
	$groupboxGlobalData.TabIndex = 1
	$groupboxGlobalData.TabStop = $False
	$groupboxGlobalData.Text = 'Global data'
	$groupboxGlobalData.UseCompatibleTextRendering = $True
	#
	# labelMacAdress
	#
	$labelMacAdress.AutoSize = $True
	$labelMacAdress.Location = '7, 71'
	$labelMacAdress.Name = 'labelMacAdress'
	$labelMacAdress.Size = '75, 17'
	$labelMacAdress.TabIndex = 7
	$labelMacAdress.Text = 'Mac address :'
	$labelMacAdress.UseCompatibleTextRendering = $True
	#
	# labelUserID
	#
	$labelUserID.AutoSize = $True
	$labelUserID.Location = '7, 45'
	$labelUserID.Name = 'labelUserID'
	$labelUserID.Size = '49, 17'
	$labelUserID.TabIndex = 6
	$labelUserID.Text = 'User ID :'
	$labelUserID.UseCompatibleTextRendering = $True
	#
	# labelComputerName
	#
	$labelComputerName.AutoSize = $True
	$labelComputerName.Location = '7, 19'
	$labelComputerName.Name = 'labelComputerName'
	$labelComputerName.Size = '91, 17'
	$labelComputerName.TabIndex = 5
	$labelComputerName.Text = 'Computer name :'
	$labelComputerName.UseCompatibleTextRendering = $True
	#
	# buttonUserID
	#
	$buttonUserID.Location = '303, 45'
	$buttonUserID.Name = 'buttonUserID'
	$buttonUserID.Size = '98, 23'
	$buttonUserID.TabIndex = 4
	$buttonUserID.Text = 'Search'
	$buttonUserID.UseCompatibleTextRendering = $True
	$buttonUserID.UseVisualStyleBackColor = $True
	#
	# textboxMacAddress
	#
	$textboxMacAddress.Location = '114, 71'
	$textboxMacAddress.Name = 'textboxMacAddress'
	$textboxMacAddress.Size = '165, 20'
	$textboxMacAddress.TabIndex = 3
	#
	# textbox2
	#
	$textbox2.Location = '114, 45'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '165, 20'
	$textbox2.TabIndex = 2
	#
	# textboxComputerNameMainForm
	#
	$textboxComputerNameMainForm.Location = '114, 19'
	$textboxComputerNameMainForm.Name = 'textboxComputerNameMainForm'
	$textboxComputerNameMainForm.Size = '165, 20'
	$textboxComputerNameMainForm.TabIndex = 1
	#
	# buttonComputerName
	#
	$buttonComputerName.Location = '303, 18'
	$buttonComputerName.Name = 'buttonComputerName'
	$buttonComputerName.Size = '98, 23'
	$buttonComputerName.TabIndex = 0
	$buttonComputerName.Text = 'Search'
	$buttonComputerName.UseCompatibleTextRendering = $True
	$buttonComputerName.UseVisualStyleBackColor = $True
	$groupboxGlobalData.ResumeLayout()
	$groupbox1.ResumeLayout()
	$Scryptero.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Scryptero.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Scryptero.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Scryptero.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Scryptero.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Scryptero.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
9gQAACODCAAAAAAABABlVEmPo2oMvEfKf2jNNdLAB4RF6m6JLez7nhsBAoQ1ENZf/zL9LiONT5ZL
lsp2uT7tLOnmbNi4+BV/vJOx7NqvX+hv8Ov7ePj4+DSGMi/buL6UdabHTfbNFmWdXrqh+d2P90/o
H/yn6w/+bS/jCm5QBtkSTbMGx9L/B0Nzeo1QM/KgrfVFmUibLWTR28tMGTlt9XUcA2V7jhnWJAkt
mRHIkJHkT1CCycdD6NRyAeuqD3y2yNy1zaDzOSF6VLIgiVNwCuI56YrC7C7cslOBYxiMjGwPXRGp
uZ/arfedgVJ1nixx/3jYGLjbY7cD4+ifQFJayaoPCj1IXKyQhXRdnUsL2/fINSzH5tLxFeSP+OFS
JOhSZQL7YynxZXww+Sxc39xCB9OH4KTZuEywpCL7WF74ghNvkCyIWqaElbk1G4K05/HMlaXIEhHb
uTqDUK+6K+74eaFQsZeyErTHA2Z6k5bKjJvQV5bTmxlcrCdhre6gA8+0fJNAM6jEzG2MBeVhOE3R
JpesWzUlt9eblIDqnN+CVSrlq3Y87HQjuNKL01SmjIIln0h3kXGcBD4lG+PUmKoHpSTuCCvlFWuz
TdZenSYrEqLF3QaPs/Ua5yxPNzI2OB7UrQ2RtK8YP9m6ZzXfn4APGlh0ooGBtyW9svUI3Fh4+tH7
NpBFqka0pMNwTVqNwUMTsRc0GeemXLftza1WRPQOhFuFjAxwUlQUUpt+9sY47H9UxLxVlKjXxcS3
vfRa8XmJ1CZ9q4ARKXofbjyry4MkeNvJI997y7DdfEpvxcVwLLcpPLsr9iL2sChFZe1Yc68UlI/P
RJ6gSs8O2WmdlVl48gwnW3ypNc8SyxhzQa8v+ni4DzdDNCvg4LuLQUjYEd1un/OwinoeITcnPjlu
Dm03ZhhTlW4Rb5gDNWDGwjK7UzRM9FDX2o3EYJAxxwMZgRZ2Az3M1YqrIZCgc6Bwfa3NYsrHE8qO
pxshX4Ydec8cMMyargYypU5rEAnlKwRD8KvX7wnh0u9fGBEkjXD6GRTrkKrhs4Yf6dVzKnvK+HSO
MeCxagIDAjRKi1x9mM/S5DFVMeKEUyNhvXge9WIR9LoTq+PBK8Kn8WgudxkJSDzSwpwWaThJC6gr
g1cZc441FSxFnZI7Mxg46zlE+8LpNYkplMTDCFXWMthmC6AycjzgKeEoo3+mzuDsoia+QrNvbBzU
JhoRqhoaPeI8429BenZ2xL7yAMpOPWGJPu/S7CrcdfNRbvoct6qyHg8GjOKM6Iquic0o97qLM+HP
LmWhm1b9+Av99fUJ/djOjwHR45g1t7rMxg/oXfmE/va57/8ADxJ3XPYEAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$ChildFormExt3Att = New-Object 'System.Windows.Forms.Form'
	$textboxExt3Att = New-Object 'System.Windows.Forms.TextBox'
	$statusbarExt3Att = New-Object 'System.Windows.Forms.StatusBar'
	$labelMACOrComputerName = New-Object 'System.Windows.Forms.Label'
	$textboxMacOrComputerName = New-Object 'System.Windows.Forms.TextBox'
	$buttonExt3AttSearch = New-Object 'System.Windows.Forms.Button'
	$buttonDeleteExt3Att = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$ChildFormExt3Att_Load={
		#TODO: Initialize Form Controls here
		$textboxMacOrComputerName.Text = $textboxMacAddress.Text
	}
	
	
	$textboxMacOrComputerName_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$labelMACOrComputerName_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonExt3AttSearch_Click={
		#TODO: Place custom script here
		$mac = $textboxMacOrComputerName.Text
		$statusbarExt3Att.Text = "Searching..."
		
		try
		{
			foreach ($computer in Get-ADComputer -Filter * -SearchBase 'OU=WIN10,OU=Workstations,OU=BSK,DC=pl,DC=ing-ad' -Properties extensionAttribute3)
			{
				if ($computer.extensionAttribute3 -eq $mac)
				{
					$ComputerNameSearch = $computer.name
				}
			}
		}
		catch
		{
			$textboxExt3Att.Text = "Not found, check status bar informations."
			$statusbarExt3Att.Text = "Error : $($_.Exception.Message)"
		}
		
		if ($ComputerNameSearch -eq $null)
		{
			$textboxExt3Att.Text = "Not Found"
		}
		else
		{
			$textboxExt3Att.Text = "$($ComputerNameSearch)"
		}
		$statusbarExt3Att.Text = "Done."
	}
	
	$statusbarExt3Att_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$ChildFormExt3Att.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildForm_textboxExt3Att = $textboxExt3Att.Text
		$script:ChildForm_textboxMacOrComputerName = $textboxMacOrComputerName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$statusbarExt3Att.remove_PanelClick($statusbarExt3Att_PanelClick)
			$labelMACOrComputerName.remove_Click($labelMACOrComputerName_Click)
			$textboxMacOrComputerName.remove_TextChanged($textboxMacOrComputerName_TextChanged)
			$buttonExt3AttSearch.remove_Click($buttonExt3AttSearch_Click)
			$ChildFormExt3Att.remove_Load($ChildFormExt3Att_Load)
			$ChildFormExt3Att.remove_Load($Form_StateCorrection_Load)
			$ChildFormExt3Att.remove_Closing($Form_StoreValues_Closing)
			$ChildFormExt3Att.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$ChildFormExt3Att.SuspendLayout()
	#
	# ChildFormExt3Att
	#
	$ChildFormExt3Att.Controls.Add($textboxExt3Att)
	$ChildFormExt3Att.Controls.Add($statusbarExt3Att)
	$ChildFormExt3Att.Controls.Add($labelMACOrComputerName)
	$ChildFormExt3Att.Controls.Add($textboxMacOrComputerName)
	$ChildFormExt3Att.Controls.Add($buttonExt3AttSearch)
	$ChildFormExt3Att.Controls.Add($buttonDeleteExt3Att)
	$ChildFormExt3Att.Controls.Add($buttonExit)
	$ChildFormExt3Att.AutoScaleDimensions = '6, 13'
	$ChildFormExt3Att.AutoScaleMode = 'Font'
	$ChildFormExt3Att.ClientSize = '308, 167'
	$ChildFormExt3Att.Name = 'ChildFormExt3Att'
	$ChildFormExt3Att.StartPosition = 'CenterParent'
	$ChildFormExt3Att.Text = 'Checking Extension Attribute'
	$ChildFormExt3Att.add_Load($ChildFormExt3Att_Load)
	#
	# textboxExt3Att
	#
	$textboxExt3Att.Enabled = $False
	$textboxExt3Att.Location = '13, 78'
	$textboxExt3Att.Name = 'textboxExt3Att'
	$textboxExt3Att.Size = '283, 20'
	$textboxExt3Att.TabIndex = 7
	$textboxExt3Att.TextAlign = 'Right'
	#
	# statusbarExt3Att
	#
	$statusbarExt3Att.Location = '0, 145'
	$statusbarExt3Att.Name = 'statusbarExt3Att'
	$statusbarExt3Att.Size = '308, 22'
	$statusbarExt3Att.TabIndex = 6
	$statusbarExt3Att.Text = 'Ready to use ...'
	$statusbarExt3Att.add_PanelClick($statusbarExt3Att_PanelClick)
	#
	# labelMACOrComputerName
	#
	$labelMACOrComputerName.AutoSize = $True
	$labelMACOrComputerName.Location = '13, 18'
	$labelMACOrComputerName.Name = 'labelMACOrComputerName'
	$labelMACOrComputerName.Size = '130, 17'
	$labelMACOrComputerName.TabIndex = 4
	$labelMACOrComputerName.Text = 'MAC or computer name :'
	$labelMACOrComputerName.UseCompatibleTextRendering = $True
	$labelMACOrComputerName.add_Click($labelMACOrComputerName_Click)
	#
	# textboxMacOrComputerName
	#
	$textboxMacOrComputerName.Location = '149, 16'
	$textboxMacOrComputerName.Name = 'textboxMacOrComputerName'
	$textboxMacOrComputerName.Size = '147, 20'
	$textboxMacOrComputerName.TabIndex = 3
	$textboxMacOrComputerName.add_TextChanged($textboxMacOrComputerName_TextChanged)
	#
	# buttonExt3AttSearch
	#
	$buttonExt3AttSearch.Location = '221, 42'
	$buttonExt3AttSearch.Name = 'buttonExt3AttSearch'
	$buttonExt3AttSearch.Size = '75, 23'
	$buttonExt3AttSearch.TabIndex = 2
	$buttonExt3AttSearch.Text = 'Search'
	$buttonExt3AttSearch.UseCompatibleTextRendering = $True
	$buttonExt3AttSearch.UseVisualStyleBackColor = $True
	$buttonExt3AttSearch.add_Click($buttonExt3AttSearch_Click)
	#
	# buttonDeleteExt3Att
	#
	$buttonDeleteExt3Att.Anchor = 'Bottom, Right'
	$buttonDeleteExt3Att.DialogResult = 'OK'
	$buttonDeleteExt3Att.Location = '12, 116'
	$buttonDeleteExt3Att.Name = 'buttonDeleteExt3Att'
	$buttonDeleteExt3Att.Size = '105, 23'
	$buttonDeleteExt3Att.TabIndex = 1
	$buttonDeleteExt3Att.Text = 'Delete Attribute'
	$buttonDeleteExt3Att.UseCompatibleTextRendering = $True
	$buttonDeleteExt3Att.UseVisualStyleBackColor = $True
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.CausesValidation = $False
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '221, 116'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 0
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$ChildFormExt3Att.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $ChildFormExt3Att.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$ChildFormExt3Att.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$ChildFormExt3Att.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$ChildFormExt3Att.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $ChildFormExt3Att.ShowDialog()

}
#endregion Source: ChildForm.psf

#region Source: SecmasterPasswordForm.psf
function Show-SecmasterPasswordForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
OAQAACODCAAAAAAABABlVMmOo0oQvFvyP7TmamlYbMBIPS0VYGzMjlmMbwWUWcy+w9ePu9/lSZOn
VC6hkCIjPy0UViNqFwH28OOddGlV/vm1/038+tpuPj4+9TaN0xLmYpojDRbo64bCAnY9ag3YdVPV
RmLVFr/r7vmJ/TP7g/Dd//Ic2iJezC0xJwB4XeDBf8EBnnVzYiQz4DwfOxwjhVyH8ilYoOQqUmpD
NYB5tveE8lp7pn9mS50fR2KYGHO7MU1DMD1dFvW7QFFMiw70uH92EPM5X8YwVsevdDGjlMDHSt+J
ELqJMzbh8XTbNWpiLV1QMJQWj/m68NuNK5cx5sAcpvSd40q78M1dgs/Kkk/LmsreXLOJYYnrwSCr
PQy0QSuXYXTOrtBHyZ6nTd2v57gvTiprbzdYMvOjLEjXLnL02w3Vt8XiLw4/BY5jCzlF1RnjSVV+
U/ZobjOtB0m2DFw2xNxw7OREeUQHNmK0YIip7YZWCGkyzpflYnonBjgDYOz7lFYR2ZypdbVEZmKw
pnyUlWv4shM9pzBviZT3DSd9iLIaGqHdsStvHaRiu6nZ4rnqGLJNxq9CLJhoEz/JQ6vjZmYvllco
/INm2aNzW4MLDC1ArfRLkMTEqlwQ+iArd885lyo1cl5vNHFO+m+BH2+Bd/itjkJ1FxtcmjpjkgzX
4tx08aAx9FUr5kle1LBNap6IvbUj9YWutWV/tskMT29o2m7CcTmvXqJSFMzXNbXACee7It0XByJj
DNyGTbVqUFjomLrprnaiHAd9q1kPHFW23jkgy961La12/fbNzZNnQBGNFLPgtXq1y7eYqapW5nPR
3WYLD8jze6calYWsTVtF+xmRUqkG1xYcYEt4PZTFWSbydg3e9yZfSTn0eky5PLTWf1AWduVIicPk
AFQKUEmB1XIQAbd6BfPh1eTjU3+yB0wZn0aZ4Edml9aH13Qfj7G13dyTPkCQgEuiiPvcQvnrXPSI
u7vLXYaOHKs1Fckv1JOrGZFuoz8dqr1EreQERtM2x8WTCq/F1/Z+asbtZqbV5JLrrmNBeDouYB41
oPKiccBC43XJigyhi3hf5ZHBKW1gggCxOUtnx/2OhYeOFoW3Gz+xH7P+2BZ0HSqCPEXdB/aufGL/
/xRffwH9XipNOAQAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCheckingSecmasterPas = New-Object 'System.Windows.Forms.Form'
	$textboxSecPass = New-Object 'System.Windows.Forms.TextBox'
	$statusbarSecPass = New-Object 'System.Windows.Forms.StatusBar'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formCheckingSecmasterPas_Load={
		#TODO: Initialize Form Controls here
		$textboxComputerName.Text = $textboxComputerNameMainForm.Text
	}
	
	$buttonSearch_Click={
		#TODO: Place custom script here
		$computerName = $textboxComputerName.Text
		$statusbarSecPass.Text = "Searching..."
		$result = $null
		try
		{
			$result = $(Get-ADComputer -Filter { name -like $computerName } -Properties ms-Mcs-AdmPwd).'ms-Mcs-AdmPwd'
		}
		catch
		{
			$statusbarSecPass.Text = "Error : $($_.Exception.Message)"
		}
		if ($result -ne $null)
		{
			$textboxSecPass.Text = "$($result)"
			$statusbarSecPass.Text = "Successfully done."
		}
		else
		{
			$statusbarSecPass.Text = "Error :( ..."
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCheckingSecmasterPas.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SecmasterPasswordForm_textboxSecPass = $textboxSecPass.Text
		$script:SecmasterPasswordForm_textboxComputerName = $textboxComputerName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSearch.remove_Click($buttonSearch_Click)
			$formCheckingSecmasterPas.remove_Load($formCheckingSecmasterPas_Load)
			$formCheckingSecmasterPas.remove_Load($Form_StateCorrection_Load)
			$formCheckingSecmasterPas.remove_Closing($Form_StoreValues_Closing)
			$formCheckingSecmasterPas.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCheckingSecmasterPas.SuspendLayout()
	#
	# formCheckingSecmasterPas
	#
	$formCheckingSecmasterPas.Controls.Add($textboxSecPass)
	$formCheckingSecmasterPas.Controls.Add($statusbarSecPass)
	$formCheckingSecmasterPas.Controls.Add($labelComputerName)
	$formCheckingSecmasterPas.Controls.Add($textboxComputerName)
	$formCheckingSecmasterPas.Controls.Add($buttonSearch)
	$formCheckingSecmasterPas.AutoScaleDimensions = '6, 13'
	$formCheckingSecmasterPas.AutoScaleMode = 'Font'
	$formCheckingSecmasterPas.ClientSize = '382, 133'
	$formCheckingSecmasterPas.Name = 'formCheckingSecmasterPas'
	$formCheckingSecmasterPas.Text = 'Checking Secmaster Password'
	$formCheckingSecmasterPas.add_Load($formCheckingSecmasterPas_Load)
	#
	# textboxSecPass
	#
	$textboxSecPass.Enabled = $False
	$textboxSecPass.Font = 'Microsoft Sans Serif, 18pt, style=Bold'
	$textboxSecPass.Location = '12, 58'
	$textboxSecPass.Name = 'textboxSecPass'
	$textboxSecPass.Size = '358, 35'
	$textboxSecPass.TabIndex = 4
	$textboxSecPass.TextAlign = 'Center'
	#
	# statusbarSecPass
	#
	$statusbarSecPass.Location = '0, 111'
	$statusbarSecPass.Name = 'statusbarSecPass'
	$statusbarSecPass.Size = '382, 22'
	$statusbarSecPass.TabIndex = 3
	$statusbarSecPass.Text = 'Ready ...'
	#
	# labelComputerName
	#
	$labelComputerName.AutoSize = $True
	$labelComputerName.Location = '12, 16'
	$labelComputerName.Name = 'labelComputerName'
	$labelComputerName.Size = '94, 17'
	$labelComputerName.TabIndex = 2
	$labelComputerName.Text = 'Computer name : '
	$labelComputerName.UseCompatibleTextRendering = $True
	#
	# textboxComputerName
	#
	$textboxComputerName.Location = '111, 13'
	$textboxComputerName.Name = 'textboxComputerName'
	$textboxComputerName.Size = '178, 20'
	$textboxComputerName.TabIndex = 1
	#
	# buttonSearch
	#
	$buttonSearch.Location = '295, 11'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 0
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	$formCheckingSecmasterPas.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCheckingSecmasterPas.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCheckingSecmasterPas.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCheckingSecmasterPas.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCheckingSecmasterPas.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCheckingSecmasterPas.ShowDialog()

}
#endregion Source: SecmasterPasswordForm.psf

#Start the application
Main ($CommandLine)
